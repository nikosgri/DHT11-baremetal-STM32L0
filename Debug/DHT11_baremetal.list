
DHT11_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080004f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004f0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000536  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000238  00000000  00000000  000205a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  000207e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00020870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000b5dd  00000000  00000000  000208c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f0f  00000000  00000000  0002bea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0003ce76  00000000  00000000  0002cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f0  00000000  00000000  00069c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00069d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080004b0 	.word	0x080004b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080004b0 	.word	0x080004b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
#include "stm32l053xx.h"
#include "rcc.h"


int main()
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    /*Initialize system clock to 16MHz*/
	init_system();
 8000224:	f000 f802 	bl	800022c <init_system>

	while (1) {}
 8000228:	e7fe      	b.n	8000228 <main+0x8>
	...

0800022c <init_system>:
 */

#include "rcc.h"

void init_system(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	/*Enable high speed internal clock HSI16*/
	RCC->CR |= RCC_CR_HSION;
 8000230:	4b17      	ldr	r3, [pc, #92]	; (8000290 <init_system+0x64>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b16      	ldr	r3, [pc, #88]	; (8000290 <init_system+0x64>)
 8000236:	2101      	movs	r1, #1
 8000238:	430a      	orrs	r2, r1
 800023a:	601a      	str	r2, [r3, #0]

	/*Wait until internal high speed clock is ready*/
	while (RCC->CR & RCC_CR_HSIRDY) {}
 800023c:	46c0      	nop			; (mov r8, r8)
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <init_system+0x64>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2204      	movs	r2, #4
 8000244:	4013      	ands	r3, r2
 8000246:	d1fa      	bne.n	800023e <init_system+0x12>

	/*Do not devide the HSI*/
	RCC->CR &= ~RCC_CR_HSIDIVEN;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <init_system+0x64>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <init_system+0x64>)
 800024e:	2108      	movs	r1, #8
 8000250:	438a      	bics	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

	/*Select microcontroller output clock*/
	MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL, (0x02 << RCC_CFGR_MCOSEL_Pos));
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <init_system+0x64>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <init_system+0x68>)
 800025a:	401a      	ands	r2, r3
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <init_system+0x64>)
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	0489      	lsls	r1, r1, #18
 8000262:	430a      	orrs	r2, r1
 8000264:	60da      	str	r2, [r3, #12]

	/*Select HSI16 as system clock*/
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (0x01 << RCC_CFGR_SW_Pos));
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <init_system+0x64>)
 8000268:	68db      	ldr	r3, [r3, #12]
 800026a:	2203      	movs	r2, #3
 800026c:	4393      	bics	r3, r2
 800026e:	001a      	movs	r2, r3
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <init_system+0x64>)
 8000272:	2101      	movs	r1, #1
 8000274:	430a      	orrs	r2, r1
 8000276:	60da      	str	r2, [r3, #12]

	/*Wait until HSI16 becomes system clock*/
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI) {}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	4b05      	ldr	r3, [pc, #20]	; (8000290 <init_system+0x64>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	220c      	movs	r2, #12
 8000280:	4013      	ands	r3, r2
 8000282:	2b04      	cmp	r3, #4
 8000284:	d1f9      	bne.n	800027a <init_system+0x4e>

	/*Update system core clock*/
	SystemCoreClockUpdate();
 8000286:	f000 f80d 	bl	80002a4 <SystemCoreClockUpdate>
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40021000 	.word	0x40021000
 8000294:	f0ffffff 	.word	0xf0ffffff

08000298 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
 80002ae:	2300      	movs	r3, #0
 80002b0:	613b      	str	r3, [r7, #16]
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 80002c0:	68db      	ldr	r3, [r3, #12]
 80002c2:	220c      	movs	r2, #12
 80002c4:	4013      	ands	r3, r2
 80002c6:	617b      	str	r3, [r7, #20]

  switch (tmp)
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	2b08      	cmp	r3, #8
 80002cc:	d024      	beq.n	8000318 <SystemCoreClockUpdate+0x74>
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d825      	bhi.n	8000320 <SystemCoreClockUpdate+0x7c>
 80002d4:	697b      	ldr	r3, [r7, #20]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d003      	beq.n	80002e2 <SystemCoreClockUpdate+0x3e>
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	2b04      	cmp	r3, #4
 80002de:	d00e      	beq.n	80002fe <SystemCoreClockUpdate+0x5a>
 80002e0:	e01e      	b.n	8000320 <SystemCoreClockUpdate+0x7c>
  {
    case 0x00U:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 80002e2:	4b45      	ldr	r3, [pc, #276]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	0b5b      	lsrs	r3, r3, #13
 80002e8:	2207      	movs	r2, #7
 80002ea:	4013      	ands	r3, r2
 80002ec:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	3301      	adds	r3, #1
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	0212      	lsls	r2, r2, #8
 80002f6:	409a      	lsls	r2, r3
 80002f8:	4b40      	ldr	r3, [pc, #256]	; (80003fc <SystemCoreClockUpdate+0x158>)
 80002fa:	601a      	str	r2, [r3, #0]
      break;
 80002fc:	e069      	b.n	80003d2 <SystemCoreClockUpdate+0x12e>
    case 0x04U:  /* HSI used as system clock */
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80002fe:	4b3e      	ldr	r3, [pc, #248]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2210      	movs	r2, #16
 8000304:	4013      	ands	r3, r2
 8000306:	d003      	beq.n	8000310 <SystemCoreClockUpdate+0x6c>
      {
        SystemCoreClock = HSI_VALUE / 4U;
 8000308:	4b3c      	ldr	r3, [pc, #240]	; (80003fc <SystemCoreClockUpdate+0x158>)
 800030a:	4a3d      	ldr	r2, [pc, #244]	; (8000400 <SystemCoreClockUpdate+0x15c>)
 800030c:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SystemCoreClock = HSI_VALUE;
      }
      break;
 800030e:	e060      	b.n	80003d2 <SystemCoreClockUpdate+0x12e>
        SystemCoreClock = HSI_VALUE;
 8000310:	4b3a      	ldr	r3, [pc, #232]	; (80003fc <SystemCoreClockUpdate+0x158>)
 8000312:	4a3c      	ldr	r2, [pc, #240]	; (8000404 <SystemCoreClockUpdate+0x160>)
 8000314:	601a      	str	r2, [r3, #0]
      break;
 8000316:	e05c      	b.n	80003d2 <SystemCoreClockUpdate+0x12e>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000318:	4b38      	ldr	r3, [pc, #224]	; (80003fc <SystemCoreClockUpdate+0x158>)
 800031a:	4a3b      	ldr	r2, [pc, #236]	; (8000408 <SystemCoreClockUpdate+0x164>)
 800031c:	601a      	str	r2, [r3, #0]
      break;
 800031e:	e058      	b.n	80003d2 <SystemCoreClockUpdate+0x12e>
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	23f0      	movs	r3, #240	; 0xf0
 8000326:	039b      	lsls	r3, r3, #14
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 800032e:	68da      	ldr	r2, [r3, #12]
 8000330:	23c0      	movs	r3, #192	; 0xc0
 8000332:	041b      	lsls	r3, r3, #16
 8000334:	4013      	ands	r3, r2
 8000336:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	0c9b      	lsrs	r3, r3, #18
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <SystemCoreClockUpdate+0x168>)
 800033e:	5cd3      	ldrb	r3, [r2, r3]
 8000340:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	0d9b      	lsrs	r3, r3, #22
 8000346:	3301      	adds	r3, #1
 8000348:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 800034c:	68da      	ldr	r2, [r3, #12]
 800034e:	2380      	movs	r3, #128	; 0x80
 8000350:	025b      	lsls	r3, r3, #9
 8000352:	4013      	ands	r3, r2
 8000354:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00U)
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d128      	bne.n	80003ae <SystemCoreClockUpdate+0x10a>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2210      	movs	r2, #16
 8000362:	4013      	ands	r3, r2
 8000364:	d011      	beq.n	800038a <SystemCoreClockUpdate+0xe6>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 8000366:	6939      	ldr	r1, [r7, #16]
 8000368:	000a      	movs	r2, r1
 800036a:	0152      	lsls	r2, r2, #5
 800036c:	1a52      	subs	r2, r2, r1
 800036e:	0193      	lsls	r3, r2, #6
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	00db      	lsls	r3, r3, #3
 8000374:	185b      	adds	r3, r3, r1
 8000376:	021b      	lsls	r3, r3, #8
 8000378:	68f9      	ldr	r1, [r7, #12]
 800037a:	0018      	movs	r0, r3
 800037c:	f7ff fec4 	bl	8000108 <__udivsi3>
 8000380:	0003      	movs	r3, r0
 8000382:	001a      	movs	r2, r3
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <SystemCoreClockUpdate+0x158>)
 8000386:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000388:	e022      	b.n	80003d0 <SystemCoreClockUpdate+0x12c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 800038a:	6939      	ldr	r1, [r7, #16]
 800038c:	000a      	movs	r2, r1
 800038e:	0152      	lsls	r2, r2, #5
 8000390:	1a52      	subs	r2, r2, r1
 8000392:	0193      	lsls	r3, r2, #6
 8000394:	1a9b      	subs	r3, r3, r2
 8000396:	00db      	lsls	r3, r3, #3
 8000398:	185b      	adds	r3, r3, r1
 800039a:	029b      	lsls	r3, r3, #10
 800039c:	68f9      	ldr	r1, [r7, #12]
 800039e:	0018      	movs	r0, r3
 80003a0:	f7ff feb2 	bl	8000108 <__udivsi3>
 80003a4:	0003      	movs	r3, r0
 80003a6:	001a      	movs	r2, r3
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <SystemCoreClockUpdate+0x158>)
 80003aa:	601a      	str	r2, [r3, #0]
      break;
 80003ac:	e010      	b.n	80003d0 <SystemCoreClockUpdate+0x12c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80003ae:	6939      	ldr	r1, [r7, #16]
 80003b0:	000a      	movs	r2, r1
 80003b2:	0152      	lsls	r2, r2, #5
 80003b4:	1a52      	subs	r2, r2, r1
 80003b6:	0193      	lsls	r3, r2, #6
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	00db      	lsls	r3, r3, #3
 80003bc:	185b      	adds	r3, r3, r1
 80003be:	025b      	lsls	r3, r3, #9
 80003c0:	68f9      	ldr	r1, [r7, #12]
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff fea0 	bl	8000108 <__udivsi3>
 80003c8:	0003      	movs	r3, r0
 80003ca:	001a      	movs	r2, r3
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <SystemCoreClockUpdate+0x158>)
 80003ce:	601a      	str	r2, [r3, #0]
      break;
 80003d0:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <SystemCoreClockUpdate+0x154>)
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	091b      	lsrs	r3, r3, #4
 80003d8:	220f      	movs	r2, #15
 80003da:	4013      	ands	r3, r2
 80003dc:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <SystemCoreClockUpdate+0x16c>)
 80003de:	5cd3      	ldrb	r3, [r2, r3]
 80003e0:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0x158>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <SystemCoreClockUpdate+0x158>)
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000
 80003fc:	20000000 	.word	0x20000000
 8000400:	003d0900 	.word	0x003d0900
 8000404:	00f42400 	.word	0x00f42400
 8000408:	007a1200 	.word	0x007a1200
 800040c:	080004d8 	.word	0x080004d8
 8000410:	080004c8 	.word	0x080004c8

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f7ff ff3e 	bl	8000298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff feeb 	bl	8000220 <main>

0800044a <LoopForever>:

LoopForever:
  b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000458:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 800045c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000460:	20000020 	.word	0x20000020

08000464 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_COMP_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	2600      	movs	r6, #0
 800046c:	4c0c      	ldr	r4, [pc, #48]	; (80004a0 <__libc_init_array+0x38>)
 800046e:	4d0d      	ldr	r5, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	2600      	movs	r6, #0
 800047a:	f000 f819 	bl	80004b0 <_init>
 800047e:	4c0a      	ldr	r4, [pc, #40]	; (80004a8 <__libc_init_array+0x40>)
 8000480:	4d0a      	ldr	r5, [pc, #40]	; (80004ac <__libc_init_array+0x44>)
 8000482:	1b64      	subs	r4, r4, r5
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	00b3      	lsls	r3, r6, #2
 800048e:	58eb      	ldr	r3, [r5, r3]
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	00b3      	lsls	r3, r6, #2
 8000498:	58eb      	ldr	r3, [r5, r3]
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004e4 	.word	0x080004e4
 80004a4:	080004e4 	.word	0x080004e4
 80004a8:	080004e8 	.word	0x080004e8
 80004ac:	080004e4 	.word	0x080004e4

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
